openapi: 3.0.3
info:
  title: part1
  description: part1 api documentation
  version: 1.0.0

servers:
  # Added by API Auto Mocking Plugin
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/universityofleiceste-8cb/part1/1.0.0
  - url: https://localhost:8080
    description: Localhost server
paths:
  /patients:
    get:
      summary: List all patients
      operationId: listPatients
      responses:
        '200':
          description: A list of patients
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Patient'
    post:
      summary: Create a new patient
      operationId: createPatient
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '201':
          description: Patient created

  /patients/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a specific patient by ID
      operationId: getPatientById
      responses:
        '200':
          description: Patient found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Patient'
    put:
      summary: Update a specific patient by ID
      operationId: updatePatientById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Patient'
      responses:
        '200':
          description: Patient updated
    delete:
      summary: Delete a specific patient by ID
      operationId: deletePatientById
      responses:
        '204':
          description: Patient deleted

  /patients/{id}/appointments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: List all appointments for a specific patient
      operationId: listAppointmentsByPatientId
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /patients/{id}/medical-records:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: List all medical records for a specific patient
      operationId: listMedicalRecordsByPatientId
      responses:
        '200':
          description: List of medical records
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MedicalRecord'

  /doctors:
    get:
      summary: List all doctors
      operationId: listDoctors
      responses:
        '200':
          description: A list of doctors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Doctor'
    post:
      summary: Create a new doctor
      operationId: createDoctor
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '201':
          description: Doctor created

  /doctors/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a specific doctor by ID
      operationId: getDoctorById
      responses:
        '200':
          description: Doctor found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Doctor'
    put:
      summary: Update a specific doctor by ID
      operationId: updateDoctorById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Doctor'
      responses:
        '200':
          description: Doctor updated
    delete:
      summary: Delete a specific doctor by ID
      operationId: deleteDoctorById
      responses:
        '204':
          description: Doctor deleted

  /doctors/{id}/appointments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: List all appointments for a specific doctor
      operationId: listAppointmentsByDoctorId
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'

  /appointments:
    get:
      summary: List all appointments
      operationId: listAppointments
      responses:
        '200':
          description: List of appointments
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Appointment'
    post:
      summary: Create a new appointment
      operationId: createAppointment
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '201':
          description: Appointment created

  /appointments/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve a specific appointment by ID
      operationId: getAppointmentById
      responses:
        '200':
          description: Appointment found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Appointment'
    put:
      summary: Update a specific appointment by ID
      operationId: updateAppointmentById
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Appointment'
      responses:
        '200':
          description: Appointment updated
    delete:
      summary: Delete a specific appointment by ID
      operationId: deleteAppointmentById
      responses:
        '204':
          description: Appointment deleted

  /appointments/{id}/medical-record:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: integer
    get:
      summary: Retrieve the medical record for a specific appointment
      operationId: getMedicalRecordByAppointmentId
      responses:
        '200':
          description: Medical record found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MedicalRecord'

  /medical-records:
    post:
      summary: Create a new medical record
      operationId: createMedicalRecord
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MedicalRecord'
      responses:
        '201':
          description: Medical record created

components:
  schemas:
    Patient:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        email:
          type: string
        phoneNumber:
          type: string
        address:
          type: string

    Doctor:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        specialisation:
          type: string
        email:
          type: string
        phoneNumber:
          type: string

    Appointment:
      type: object
      properties:
        id:
          type: integer
        appointmentDate:
          type: string
          format: date-time
        status:
          type: string
          enum: [Scheduled, Completed, Cancelled]
        notes:
          type: string
        patientId:
          type: integer
        doctorId:
          type: integer

    MedicalRecord:
      type: object
      properties:
        id:
          type: integer
        recordDate:
          type: string
          format: date-time
        diagnosis:
          type: string
        treatment:
          type: string
        notes:
          type: string
        appointmentId:
          type: integer